// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash)
VALUES (?, ?)
RETURNING id, email, password_hash, created_at, updated_at
`

type CreateUserParams struct {
	Email        string
	PasswordHash sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserProvider = `-- name: CreateUserProvider :one
INSERT INTO user_providers (user_id, provider, provider_user_id)
VALUES (?, ?, ?)
RETURNING id, user_id, provider, provider_user_id, created_at, updated_at
`

type CreateUserProviderParams struct {
	UserID         int64
	Provider       string
	ProviderUserID string
}

func (q *Queries) CreateUserProvider(ctx context.Context, arg CreateUserProviderParams) (UserProvider, error) {
	row := q.db.QueryRowContext(ctx, createUserProvider, arg.UserID, arg.Provider, arg.ProviderUserID)
	var i UserProvider
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserAndProviderInfo = `-- name: GetUserAndProviderInfo :one
SELECT 
    u.id AS user_id, 
    u.email AS user_email, 
    uop.id AS oauth_id
FROM users u
LEFT JOIN user_providers uop 
    ON u.id = uop.user_id 
    AND uop.provider = ? 
    AND uop.provider_user_id = ?
WHERE u.email = ?
LIMIT 1
`

type GetUserAndProviderInfoParams struct {
	Provider       string
	ProviderUserID string
	Email          string
}

type GetUserAndProviderInfoRow struct {
	UserID    int64
	UserEmail string
	OauthID   sql.NullInt64
}

func (q *Queries) GetUserAndProviderInfo(ctx context.Context, arg GetUserAndProviderInfoParams) (GetUserAndProviderInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAndProviderInfo, arg.Provider, arg.ProviderUserID, arg.Email)
	var i GetUserAndProviderInfoRow
	err := row.Scan(&i.UserID, &i.UserEmail, &i.OauthID)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, created_at, updated_at
FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = ?, updated_at = CURRENT_TIMESTAMP
WHERE email = ?
`

type UpdateUserPasswordParams struct {
	PasswordHash sql.NullString
	Email        string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.Email)
	return err
}
